// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductCatalog.Dal;

#nullable disable

namespace ProductCatalog.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("ProductCatalog.Domain.Entity.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("product_category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Product = "ECOM"
                        },
                        new
                        {
                            Id = 2,
                            Product = "VPN"
                        });
                });

            modelBuilder.Entity("ProductCatalog.Domain.Entity.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("product_group");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Корзина",
                            ProductCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "VPN",
                            ProductCategoryId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Разводная виртуальной инфраструктуры",
                            ProductCategoryId = 2
                        });
                });

            modelBuilder.Entity("ProductCatalog.Domain.Entity.ProductPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ecom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("product_page");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentType = "sale",
                            Ecom = "yes",
                            ProductGroupId = 1,
                            Url = "/shop/cart"
                        },
                        new
                        {
                            Id = 2,
                            ContentType = "sale",
                            Ecom = "yes",
                            ProductGroupId = 2,
                            Url = "/products/gost-vpn_1"
                        },
                        new
                        {
                            Id = 3,
                            ContentType = "sale",
                            Ecom = "yes",
                            ProductGroupId = 2,
                            Url = "/shop/products/kanal-svyazi-l2-vpn"
                        },
                        new
                        {
                            Id = 4,
                            ContentType = "sale",
                            Ecom = "yes",
                            ProductGroupId = 3,
                            Url = "/services/setevaya-infrastruktura"
                        });
                });

            modelBuilder.Entity("ProductCatalog.Domain.Entity.ProductGroup", b =>
                {
                    b.HasOne("ProductCatalog.Domain.Entity.ProductCategory", "ProductCategory")
                        .WithMany("ProductGroup")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Entity.ProductPage", b =>
                {
                    b.HasOne("ProductCatalog.Domain.Entity.ProductGroup", "ProductGroup")
                        .WithMany("ProductPages")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Entity.ProductCategory", b =>
                {
                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("ProductCatalog.Domain.Entity.ProductGroup", b =>
                {
                    b.Navigation("ProductPages");
                });
#pragma warning restore 612, 618
        }
    }
}
